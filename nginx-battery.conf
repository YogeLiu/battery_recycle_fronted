server {
    listen 8080;
    server_name _;
    
    # 根路径重定向到/doc_ai/
    location = / {
        return 301 /doc_ai/;
    }

    # 原有的前端静态文件配置
    location /doc_ai/ {
        alias /doc_ai/dist/;
        try_files $uri $uri/ /doc_ai/index.html;
        index index.html;
    }
    
    # 电池回收系统前端JS/CSS文件缓存控制
    location ~* ^/battery/.*\.(js|css)$ {
        alias /battery/dist/;
        try_files $uri =404;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Pragma public;
        gzip on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    }
    
    # 电池回收系统前端HTML文件缓存控制
    location ~* ^/battery/.*\.(html|htm)$ {
        alias /battery/dist/;
        try_files $uri =404;
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
        add_header Pragma no-cache;
    }
    
    # 电池回收系统前端根HTML文件缓存控制
    location = /battery/index.html {
        alias /battery/dist/index.html;
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
        add_header Pragma no-cache;
    }
    
    # 电池回收系统前端配置
    location /battery/ {
        alias /battery/dist/;
        try_files $uri $uri/ /battery/index.html;
        index index.html;
        
        # 启用gzip压缩
        gzip on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    }
    
    # 电池回收系统API代理
    location /battery/api/ {
        proxy_pass http://127.0.0.1:8036/jxc/v1/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # CORS设置
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
    
    # 日志配置
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
}